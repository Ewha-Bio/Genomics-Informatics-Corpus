Genomics &  Informatics  Vol.  1 (1) 25-31, September 2003 

A Heuristic Algorithm to Find All Normalized Local 
Alignments Above Threshold 

Sangtae  Kim 1
Kunsoo  Park2
•
Seo4
6 
•

,  Jeong  Seop  Sim 2
,  Heejin  Parka, 
3*,  Hyunseok  Parl(l·5  and  Jeong-Sun 

'Department  of Computer Science,  Korea  Military Academy, 
Seoul, Korea 
2Eiectronics  and  Telecommunications  Research  Institute, 
Daejeon, Korea 
3School  of Computer Science  and  Engineering,  Seoul  National 
University, Seoul, Korea 
•institute of Bioinformatics, Macrogen, Inc., Seoul, Korea 
5Department  of  Computer Science,  Ewha Womans  University, 
Seoul, Korea 
•llcheon  Molecular Medicine  Institute,  Seoul  National  University, 
Seoul, Korea 

Abstract 

Local  alignment  is  an  important task in  molecular 
biology to see if two sequences contain  regions that 
are  similar.  The  most popular approach  to  local 
alignment is the use of dynamic programming due to 
Smith  and  Waterman,  but the  alignment  reported  by 
the Smith-Waterman algorithm has some undesirable 
properties. The recent approach to fix these problems 
is to use the  notion  of normalized  scores for local 
alignments by Arslan,  Egecioglu  and  Pevzner.  In  this 
paper we  consider the  problem  of finding  all  local 
alignments  whose  normalized  scores  are  above  a 
given  threshold,  and  present  a fast  heuristic algo(cid:173)
rithm.  Our algorithm  is 180-330 times faster than 
Arslan  et al.'s for sequences of length about 120 kbp 
and about 40-50 times faster for sequences of length 
about 30 kbp. 

Keywords:  local  alignment,  dynamic  programming, 
normalized score, fractional programming 

Introduction 

Sequence  alignment  is  a fundamental  task  in  molecular 

*Corresponding author: E-mail kpark@theory.snu.ac.kr 
Accepted 26 March 2003 

biology  to  see  if  two  sequences  are  related.  The  local 
alignment  problem  for  two  sequences  is  to  find  a pair  of 
similar  regions,  one  from  each  sequence.  In  many 
biological  applications  local  alignment  is  more  useful  than 
global  alignment  because  two  sequences  may  not  be 
similar as  a whole,  but they can  contain  small  regions that 
are very similar. 

A most popular approach to local alignment is the use of 
dynamic programming due to Smith and Waterman (Smith 
and Waterman,  1981; Waterman eta/.,  1995). The  Smith(cid:173)
Waterman  algorithm  finds  a  pair  of  regions  whose 
alignment score  is  the  highest  (which  is  called  the  optimal 
local  alignment).  However,  the  alignment  reported  by  the 
Smith-Waterman  algorithm  has  some  undesirable 
properties.  The  alignment  may  include  regions  whose 
similarity  is  very  poor  (Arslan  et a/.,  2001;  Zhang  et a/., 
1999).  Also,  the  Smith-Waterman  algorithm  does  not 
consider the  lengths  of  local  alignments  in  computing 
scores,  and  therefore  a biologically  important  but  short 
alignment  may  not be  detected(Arslan  and  Pevzner et a/., 
2001). 

There  have  been  several  approaches  to  fix  the 
problems  of  the  Smith-Waterman  algorithm  (Goad  and 
Kanehisa,  1982;  Sellers,  1984;  Zhang  et a/.,  1998;  Zhang 
eta/.,  1999; Arslan and Pevzner eta/., 2001 ).  For example, 
Zhang  et a/.  (Zhang  et a/.,  1998;  Zhang  and  Miller et a/., 
1999)  proposed  an  approach  based  on  the  notion  of x(cid:173)
drop,  a region  that  scores  below  -X for  some  fixed  X>O. 
They  consider  only  alignments  that  contain  no  X-drop.  A 
more  recent  approach  to  fix  the  problems  is  the  use  of 
normalized  scores  for  local  aliqnments  (Marzal  and  Vidal 
1993;  Arslan  and  0. Egecioglu  (1999);  Arslan  eta/., 
2001).  Arslan  eta/.  (2001)  used fractional  programming to 
obtain  the  optimal  normalized  local  alignment  of  two 
sequences.  They  also  extended  their  solution  to  find  all 
local  alignments  whose  normalized  scores  are  larger than 
a given threshold  by running their solution  repeatedly after 
masking those alignments that are already found. 

In this paper we consider the problem of finding a// local 
alignments  whose  normalized  scores  are  above  a given 
threshold.  A local  alignment  whose  normalized  score  is 
above  a threshold  will  be  called  a TNL  alignment.  Since 
small  regions  are  reported  in  the  local  alignment problem, 
finding a// of TNL alignments can  be more appropriate than 
just finding a single (optimal) local alignment in applications 
such  as  gene  prediction  (Gusfield,  1997).  We  present  a 
fast  algorithm  for  the  problem  of  finding  all  the  TNL 

26  Genomics &  Informatics Vol.  1 (1) 25-31, September 2003 

alignments.  Our  algorithm  is  based  on  fractional 
programming  and  the  banded  Smith-Waterman  algorithm. 
The  fractional  programming  approach  uses  the  Smith(cid:173)
Waterman  algorithm  repeatedly  to  obtain  one  local 
alignment.  Arslan  et a/.  (Arslan  et a/.,  2001)  use  this 
solution  repeatedly to  find  all  the  TNL alignments.  Hence, 
Arslan  et a!.' s algorithm  makes  a double  repetition  of  the 
Smith-Waterman  algorithm,  which  makes  it very  slow  in 
practice.  Our  algorithm  first  makes  a careful  selection  of 
bands  based  on  several  parameters  so  that the  selected 
bands  can  only  contain  TNL  alignments  with  high 
probability.  Then  it runs the  Smith-Waterman algorithm on 
the  selected  bands  in  such  a way  that the  number of 
applications  of  the  Smith-Waterman  algorithm  on  each 
band is much smaller than that of Arslan eta!.' s. 

Experiments  show that  our algorithm  is  about  180-330 
times faster than  Arslan et al.' s for the data set of human 
chromosome  X cosmids  Qc8D3  (GenBank  Ace.  No. 
AF030876  ( 113  kbp))  and  mouse  chromosome  X clone 
BAC  822804  (GenBank Ace.  No.  AF121351  (123  kbp)) 
and it is about 40-50 times faster for the data set of human 
(GenBank  Ace.  No.  L 10347  (31  kbp))  and  mouse 
(GenBank  Ace.  No.  M65161  (32.4  kbp))  pro-alpha1  type 
the  benefit of  II  collagen,  while finding  all  TNL alignments. 
In  addition  to  extremely fast  speed,  our algorithm  can 
change  the  parameters  for  selecting  bands  to  adjust  the 
time and accuracy of our algorithm. 

Preliminaries 

A string or a sequence  is concatenations  of  zero  or more 
characters from  an  alphabet  2 . A space is denoted by  L1 
tE 2; we  regard  L1  as  a character for  convenience.  The 
length  of  a string  a  is  denoted  by  I a I .  Let  a.  denote  ith 
character of a string a  and a(i, j) denote a substring a.a.+ 1 
· · ·aj of a.  When a sequence a is a substring of a sequence 
a,  we  denote  it  by  a<a.  Given  two  strings  a=a1ar ··am  and 
b=b1br .. bn,  an  alignment of a  and  b is  a* =a1*w* .. ·at and 
b* =b1*b2* .. ·bt constructed  by  inserting  zero  or  more  LJ'  s 
into a  and b so that each ffi*  maps to b,*  for 1 :Sis!. There 
are three  kinds  of  mappings  in  a* and b*  according  to  the 
characters of and a: and b.*. 

match: ffi*=b•** d, 

·  mismatch : (a•* =f=b,*) and (a•*,b,* =I=  L1  ) , 
·  insertion or deletion (indel for short) : either a.* or b, * is  L1 . 
Note that we do not allow the case of a•* =b•*= L1  . 
If  there  exists  an  alignment  of  a  and  b  whose  number  of 
matches, mismatches and indels are~yand z,  respectively, 
then we call the triplet (x,  y,  z)  an alignment vector of a  and 
b. We define the alignment score of an alignment a*  and b* 
with  alignment vector  (x,  y,  z)  by score{x,  y,  z) = x-ay -p,z 
that  is,  we  assume  that  a match  score  is  1 , a mismatch 

penalty  is  8  and  an  indel  penalty  is  p..  We  define  the 
similarity of two sequences  a  and b,  denoted by S(a,  b),  to 
be the highest alignment score of all possible alignments of 
a and b. 

Local Alignments 
Given two sequences a  and b,  a local alignment of a  and b 
is  an  alignment of two  strings  a  and (3  such  a<a  and  fJ<b, 
and  the  optimal local alignment of  a  and  b is  the  local 
alignment of a and b that has the highest similarity among 
all  local  alignments of a and b.  We  denote the  similarity of 
an optimal local alignment by SL( a,  b). 
A most  well-known  algorithm  to  find  an  optimal  local 
alignment  was  given  by  Smith  and  Waterman,  which  is 
known  as  the  Smith-Waterman  algorithm  (SW  algorithm 
for short)  (Smith  and  Waterman,  1981;  Waterman,  1995). 
Given  two  sequences a{lal=m)  and  b{lbl=n),  the  SW 
algorithm computes SL( a,  b)  using a dynamic programming 
table (called the H table) of size (m+1){n+1).  Let liJ for OS:i 
S:m and 0 S:j S:n denote SL( a(l,  i),  b(l, j)). Then, H,J can  be 
computed by the following recurrence: 

H,,,  = H,,1  = 0  ( 0 ~ i ~ m, 0  ~ j  ~ n) 

H~1  =  max { 0, H,.J,J·l  + s(a,, b1 ), H,. 1.J-P, H,.u-P} 

s (a,, b1  ) = 

1 

{ 

-(} 

if a,= b1 
if a,* bi 

Among all H,J for 0 S:iS:m and 0 S:j S:n,  the highest value is 
SL(a,  b),  and  the  SW  algorithm  takes  O(mn)  time  to 
compute it. 

Normalized Local Alignments 
Since  the  SW  algorithm  does  not consider  the  lengths  of 
local  alignments,  the  solution  of  the  SW  algorithm  may 
include some  regions with  very low similarity.  Moreover,  a 
biologically important short alignment may not be detected 
(Arslan  and  Pevzner et a/.,  2001;  Alexandrov  and 
Solovyev,  1998;  Zhang  and  Miller eta/.,  1999). To handle 
these  problems,  the  notion  9!  normalization  for  similarity 
has been introduced (Arslan  o.  Egecioglu  {1999), Arslan et 
a/.,  2001;  Egecioglu  and  I bel,  1996;  Marzal  and  Vidal, 
1993; Alexandrov and Solovyev, 1998). 

Given two sequences a and b,  we define the normalized 
similarity of  a  and  b  by,  S(a,  b)l(lal+lbi+L),  where  L  is  a 
constant.  From  this  definition  we  can  define  a normalized 
alignment  score  for  local  alignment:  the  normalized 
alignment score  of an  alignment  a*  and  b*  with  alignment 
vector  (x,  y,  z) 
is  defined  by  nscore  (x,  y,  z)  = 
'~::i;:::2 (Arslan  and  Pevzner eta/.,  2001 ). The opti(cid:173)
mal  normalized local alignment  of  a  and  b is  the  local 
alignment  of  a  and  b  that  has  the  highest  normalized 
alignment score. 

A Heuristic Algorithm to Find All Normalized Local Alignments Above Threshold  27 

Here  we  consider  two  problems  related  to  normalized 
local  alignment:  one is to find  the  optimal  normalized  local 
alignment of a and b; the other is to find all  normalized local 
alignments of a and b above some threshold Ts. 

Optimal Normalized Local Alignment 
Given two sequences a  and b,  let A V( a,  b)  be the set of all 
possible alignment vectors of a( a that (3(b.  The problem of 
finding  an  optimal  local  alignment  (LA  problem  for short) 
and that  of  finding  an  optimal  normalized  local  alignment 
(NLA problem for short) are defined as follows: 
LA problem : Find (x,  y, z)  E  A V( a,  b) such that score(x, y, 

z)  is greatest in A V( a,  b). 

NLA problem: Find  (x,  y,  z)  E  A V( a,  b)  such  that 

nscore(x, y,  z)  is greatest in A V( a,  b). 

Note  that  we  can  find  the  score  of  an  optimal  local 
alignment  using  the  SW  algorithm  but  with  a simple 
modification  of  storing  the  starting  position  of  each  score, 
we can also find the location of the optimal local alignment. 
For  a given  A,  we  define  the parametric  local alignment 
problem as follows: 

LA(A.)  problem:  For  all  (x,  y,  z)EAV(a,  b),  find  the 
maximal value of x-13  y  - pz -A ( 2X+2y+z+L) 
A parametric  local  alignment  problem  can  be  converted 
into a local alignment problem because the optimal solution 
of  LA(A)  involves  solving  a local  alignment  problem  and 
performing  some  simple  computations  (Arslan  and 
Pevzner et at.,  2001). 
We  can  use  Dinkelbach' s algorithm  to  solve  the  NLA 
problem.  Dinkelbach  developed  a general  algorithm  that 
uses  fractional programming  (Dinkelbach,  1967).  The 
optimal  solution  to  NLA  can  be  obtained  via  a series  of 
optimal  solutions  of  LA(A)  for  different  X s using  the 
following result: 

Algorithm 1 Dinkel'-chs algorithm 

1. Choose an arbitrary alignment vector(~ JIZ)  E  AV(a, b) 

2. Set A*= 

x -(Jy -pz 

2x+2y+z+L 

3.  Repeat 
4.  A= A* 
5. Convert the problem into the LA(A) problem and obtain(~ JIZ) 
e.  A*  = 

x -(Jy -pz 

2x+2y+z+L 

7.  Until A= A* 
8.  Return A* 

A local  alignment  whose  normalized  alignment  score  is 
above  a given  threshold  will  be  called  a TNL  alignment. 
Therefore,  the  TNLA  problem  is  to  find  all  the  TNL 
alignments. 
For the TNLA problem,  Arslan et at.  (2001)  first solve the 
NLA problem and then mask the solution to repeatedly find 
the next optimal solution of the NLA problem. 

Banded Smith-Waterman Algorithm 
In  general,  it  is  highly likely that an  optimal  local alignment 
has a long part of exact matches  in  it.  The banded Smith(cid:173)
Waterman  algorithm  uses  this  phenomenon  and  finds  a 
solution  very  quickly  for  the  LA  problem  with  high 
probability  (Setubal  and  Meidanis,  1997).  Many  biological 
systems  such  as  Phrap  (Green),  STROLL  (Chen  and 
Skiena,  1997)  and  FAST A (Lipman  and  Pearson,  1998) 
are based on this algorithm. 

The  banded  SW  algorithm  consists  of  the  following  two 
steps: 

A is the optimal solution for NLA if and only if LA(A)=O. 

1. Determine bands 

Dinkelbach's  algorithm  (Dinkelbach,  1967)  (See  Algorithm 
1)  starts  with  an  initial  value  for  A and  repeatedly  solves 
LA(A).  Since  the  LA(A)  problem  can  be  converted  into  an 
LA  problem,  it  solves  the  LA  problem  and  obtains  an 
optimal alignment vector (x,  y,  z).  Next,  it sets A= nscore(x, y, 
z)  and  repeats this process until  A is  not changed any more. 
The convergence to the optimal solution of the NLA problem is 
guaranteed (Arslan eta/., 2001 ). 

Find  all  the  bands  that  can  have  local  alignments  with 
high  similarity.  Usually,  a  band  is  defined  by  the 
information  of exact  matches  and  if two  or more  bands 
overlap, they are merged into one band. 

2. Run the SW algorithm 

Run the SW algorithm on the defined bands. The entries 
of H,j outside the bands are assumed 0 and they are not 
computed. 

All  Normalized  Local  Alignments  Above  a 
Threshold 
In  some  biological  applications,  we  need  to  find  all  local 
alignments whose normalized alignment scores are above a 
given threshold. Formally, we define this problem as follows: 
TNLA problem : For given a threshold value Ts,  find all (x, 
y,  z)  E  A V( a,  b)  such that nscore(x, y,  z) 
?.Ts. 

Methods 

We  first  present  an  algorithm  for  finding  an  optimally 
normalized  local  alignment  (the  NLA  problem)  and  then 
present  algorithms  for  finding  all  local  alignments  whose 
normalized  alignment scores  are  above  a given  threshold 
Ts  (the TNLA problem).  Our algorithm for the NLA problem 
is  used  as  a subroutine  in  our  algorithms  for  the  TNLA 

28  Genomics &  Informatics Vol.  1 (1) 25-31, September 2003 

problem. 

Optimal Normalized Local Alignment 
We  present  an  algorithm  for  the  NLA  problem  of  two 
strings  a(lal=m)  and  b(lbl=n).  Our  algorithm  is  based  on 
Dinkelbach' s algorithm  which  is  a general  algorithm  to 
solve the NLA problem. We use the banded SW algorithm 
to  solve the  LA  problem  in  Dinkelbach' s algorithm.  Since 
we  already  described  Dinkelbach' s algorithm  and  the 
banded  SW algorithm,  we  concentrate  on  describing  how 
to determine bands. 

We  first  introduce  some  definitions  before  we  describe 
how  to  determine  the  bands.  Consider the  H  table 
generated by the  SW algorithm  in  computing SL(a,  b).  The 
ith-diagonal  (or  diagonal  i},  Osism(resp.  -nsis-1), 
represents a diagonal that passes through  (0,  i}  (resp.  (-i, 
0}) element of the H table. A band is a set of diagonals and 
the width of a band is the number of diagonals in the band. 
A band i of width k is a set of diagonals from i through i+k-
1.  We say that an  exact match (i, j) occurs in  diagonal k  if 
a(i, j)= b(i+k.j+k).  Exact match (i, j) is maximal if a1-1 =/=b,+k-1 
and a1+1 =l=bJ+k+l.  The length of exact match (i,j) isj-i+l. 

We  show  how  to  determine  the  bands  with  given 
parameters TL,  w,  and n. The parameter TL  is a threshold on 
the length of an exact match, w is the width of a band,  and 
Tb  is a threshold  on  the weight of a band.  Determining the 
bands is composed of the following four steps: 
1. Find  all  maximal  exact  matches  longer than  TL  in  each 
diagonal.  We  first  generate  all  suffixes  of  a  and  b and 
sort them  in  lexicographic order.  Once all the suffixes of 
a and  b  are  sorted,  it  is  easy to  find  all  maximal  exact 
matches longer than 'FL. 

2. Compute the weight of each diagonal, where the weight 
of  a diagonal  is  the  sum  of the  lengths  of  all  maximal 
exact matches longer than TL  in the diagonal. 

3. Select  every  band  b  of  width  w  whose  weight  is  above 
Tb,  where the weight of a band is the sum of the weights 
of all diagonals in the band. 

4.  Merge two bands B1={d,  · · ·,  d)  and B2={d"'  .. ·,  d) into a 
single  band B={min(d,  dk),  ···,max( d.  d)},  if they overlap 
(i.e.,  i:<:;k:<:;j  or i:<:;l:<:;j).  Repeat  merging  until  no  two 
bands overlap. (Fig.  1) 
Parameters TL,  w, and n should be chosen appropriately 
so that an  optimal  normalized local  alignment does not lie 
out  of  the  bands.  In  Section  4,  we  suggest  appropriate 
values for TL,  w, and Tb through experiments. 

Our algorithm for the  NLA problem  first  determines the 
bands as explained above and then runs the SW algorithm 
on  the  selected  bands.  The  speedup  achieved  by  our 
algorithm  over Arslan  et at.' s is  due  to  the  following  two 
improvements. 
·  We  uses  the  banded  SW  algorithm  to  solve  the  LA 

Fig. 1. Merging and discarding bands. 

problem  of  Dinkelbach' s algorithm  while  Arslan  et a/. 
used the SW algorithm. Thus, the speedup achieved by 
the  banded  SW  algorithm  over the  SW  algorithm  is 
reflected in our algorithm. 
We  perform  the  step  of  determining  bands  in  the 
banded  SW  algorithm  only  once  while  we  perform  the 
banded  SW  algorithm  several  times  in  Dinkelbach' s 
algorithm.  Since  the  bands  are  the  sets  of  diagonals 
where  long  exact  matches  occur,  the  bands  in  all 
repetitions  of the  banded  SW  algorithm  are  the  same. 
Hence, we need to determine the bands only once. 

All  Normalized  Local  Alignments  Above  a 
Threshold 
We  now  present  algorithms for the  TNLA  problem  of  two 
strings  a  and  b.  We first  give a simple algorithm that finds 
all  normalized  local  alignments  whose  alignment  scores 
are  above  a given  threshold  r,  (the  TNL  alignments)  in 
such a way that a TNL alignment of larger alignment score 
is found  earlier than  a TNL alignment of smaller alignment 
score. Arslan et at.  (Arslan et at.,  2001) also found the TNL 
alignments  in  the  same  decreasing  order.  Then,  we 
improve  the  simple  algorithm  by  finding  the  TNL 
alignments in a somewhat different order. 

The  simple  algorithm  consists  of two  steps.  Step  1 is 
performed  once  and  step  2 is  repeated  until  all  TNL 
alignments are found. 
Step 1. Find  all  maximal  exact  matches  of a and  b longer 
than  Tz  and  determine  the  bands  as  we  did  in 
Section 3.1 . 

Step 2. Find an optimal normalized local alignment of a and 
b  using  the  algorithm  presented  in  Section  3.1.  If 
the  alignment  score  of  the  found  alignment  is 
above  T,,  mask  the  found  alignment  and  repeat 

A Heuristic Algorithm to Find All Normalized Local Alignments Above Threshold  29 

step 2. Otherwise, terminate. 

The  simple  algorithm  finds  the  normalized  local 
alignments  in  decreasing  order  of  alignment scores. 
Hence, it is guaranteed that every TNL alignment has been 
found when the simple algorithm terminates. 

We  consider  the  speedup  achieved  by  the  simple 
algorithm  over  Arslan  eta/.' s algorithm.  Let p  denote  the 
number of the TNL alignments. Step 2 iterates just p times. 
Since the time  for  masking  an  alignment  is  negligible  and 
our  algorithm  performs  step  1 only  once,  our  simple 
algorithm  for  the  TNLA  problem  takes  about p times  our 
algorithm  for  the  NLA  problem.  Also,  Arslan  et a!.'  s 
algorithm  for  the  TNLA  problem  takes p  times  their 
algorithm  for  the  NLA  problem.  Therefore,  the  speedup 
achieved  by  our  simple  algorithm  over  Arslan  et a/.' s 
algorithm  for  the  TNLA  problem  is  the  speedup  achieved 
by our algorithm  over Arslan et a/.'s algorithm for the  NLA 
problem. 

As long as all the TNL alignments are guaranteed to  be 
found,  the  order of the  alignments that are  found  may  not 
be  important.  If  we  find  the  TNL  alignments  in  a different 
order,  we  can  find  them  more  efficiently.  The  improved 
algorithm is as follows. 
Step 1. Find  all  maximal  exact  matches  of  a and  b  longer 
than  Tl  and determine the bands as in  Section 3.1. 
Let B1,  Bz,  · · ·,  B, denote the bands. 

Step 2. For each band R for 1-s;i-s;k, perform the following. 
Find  an  optimal  normalized  local  alignment  within 
Bt  by  running  the  SW  algorithm  only  in  St.  If  the 
normalized alignment score of the found alignment 
is  above  T,,  mask the found  alignment and  repeat. 
Otherwise, we are done with R 

It is easy to see that all the TNL alignments have been 

found when the improved algorithm terminates. 

We  consider the  speedup  achieved  by  the  improved 
algorithm over the simple algorithm.  Let C,  1 <:;i<:;k,  denote 
the number of the TNL alignments included in  band B,  and 
w~ the  width  of R  In  the  improved  algorithm,  bands, is 
accessed when we find each of c TNL alignments while in 
the  simple  algorithm,  all  bands B1,  Bz,  · · ·,  B1  are  accessed 
when  we find  each  of  C1+C2+ .. ·+C TNL alignments.  Note 
that the improved algorithm accesses R at least once even 
if  there  is  no  TNL  alignment  in  it.  Hence,  the  speedup 
achieved  by  the  improved  algorithm  over the  simple 
algorithm is 

WtXmax(Ct, l)+W2Xmax(C2,  l)+ .. ·+WkXmax(Ct, 1) 

(1) 

Remark : We can consider affine gaps in  both problems of 
NLA and TNLA. The affine gap penalty for a gap is defined 
as  y + pk,  where  y  is  a gap  open  penalty,  p. 
is  an  in del 

penalty and  k  is  the  length  of  a gap.  We  can  include  the 
affine gap penalty in our algorithms for NLA and TNLA by a 
simple  modification of the  recurrence  of the  SW  algorithm 
(Gotoh 1982; Waterman 1995). 

Results and Discussion 

We implemented and compared two algorithms for the NLA 
problem:  Arslan et al.' s and  ours,  and  three  algorithms for 
the  TNLA  problem:  Arslan  et a/'.s  algorithm,  our  simple 
algorithm  and  our  improved  algorithm.  In  all  our 
implementations, we considered the affine gaps. 

We  have  chosen  two  data sets  to  test the  efficiency of 
the  algorithms:  (i)  human  chromosome  X cosmids  Qc8D3 
(GenBank  Ace.  No.  AF030876  (113  kbp))  and  mouse 
chromosome  X clone  BAC  822804  (GenBank  Ace.  No. 
AF121351  (123  kbp))  and  (ii)  human  (GenBank  Ace.  No. 
L10347  (31kbp))  and  mouse  (GenBank Ace.  No.  M65161 
(32.4  kbp))  pro-alpha1  type  II  collagen.  Since  the repeats 
which  are biologically uninteresting regions  may have high 
normalized  scores,  we  masked  the  repeats  by 
RepeatMasker  (http://  repeatmasker.  genome.washington. 
edu/) before running all the algorithms. 

We  implemented  all  the  algorithms  in  C++  language. 
The  programs  were  run  on  Pentium  Ill  866MHz x 2 work(cid:173)
station  with  768MB  main  memory.  The  parameter values 
used  in  our algorithms are  as follows:  L=2000  (a  constant 
in  defining  normalized  scores),  0'=1  (mismatch  penalty),  y 
=6  (gap open  penalty), p=0.2 (indel penalty),  and T,=0.035 
(threshold of normalized score). 

NLAProblem 
Our  algorithm  finds  the  same  optimal  normalized  local 
alignment  as  Arslan  et a/.'s  algorithm  does  even  when 
w=1 00  for  both  data  sets.  As  shown  in  Table  1,  our 
algorithm  is  about  20  times  faster than  Arslan  eta/.' s for 
both data sets when w ::::> 150 and r,-s; 150. 

We have experimented with  various values  of the three 
parameters T1,  Tb  and w,  and  here we show nine cases for 
three  values  of  Tt  and  three  values  of  w  and  we  have 
chosen an appropriate value of Tb  for each Tl.  Note that we 
decrease  Tb  as  Tl  increases.  Otherwise,  good  bands  may 
be  discarded  since  longer  exact  matches  are  fewer  than 
shorter exact matches. 

TNLA Problem 
Table  2 and  Table  3 show  execution  times  of  the  three 
algorithms  for the  TNLA  problem.  We  first  analyze  the 
ratios  of  execution  times  of  the  three  algorithms.  Assume 
that  the  widths  of  all  bands  are  the  same  and  the  TNL 
alignments  are  equally  distributed  in  the  bands  which 
include TNL alignments.  Let k be the number of the bands 

30  Genomics &  Informatics Vol.  1 (1) 25-31, September 2003 

Table 1. Execution time (in seconds} for the NLA problem (first data set I second data set). 

Arslan et al.' s algorithm 

5958514340 

w=100 
w=150 
w=200 

Tr-12,  T~>=80 
1365 I 207 
21081230 
28271283 

Our algorithm 
Tr-15, T,=50 
468 I 187 
6151207 
7461225 

Tr-20,  T,=30 
3981170 
5131198 
621 1218 

Table 2. Execution time (in seconds} for the TNLA problem for the first data set. 

Simple algorithm 

Improved algorithm 

Tr-12, 
TF80 
1923 
2705 
3492 

Tr-12, 
T>=80 
970 
1441 
1578 

Tr-15, 
T,=50 
1351 
1895 
2209 

Improved algorithm 

Tr-15, 
Tb=50 
638 
1333 
1443 

71=20, 
TF30 
1259 
1581 
1996 

Tr-20, 
T,=30 
491 
1114 
1391 

Arslan 
et al.' s 
algorithm 

631603 

Tr-12, 
T,=BO 
14345 
25249 
35172 

71=15, 
Tb=50 
4876 
7473 
8879 

Tr-20, 

T~>=30 
3915 
5332 
6921 

w=100 
w=150 
w=200 

Table 3. Execution time (in seconds} for the TNLA problem for the second data set. 

Arslan 
etal.' s 
algorithm 

67558 

Tr-12, 
T,=80 
2390 
2643 
3263 

Simple algorithm 

Tr-15, 
TF50 
2224 
2396 
2592 

Tr-20, 
TF30 
1964 
2384 
2508 

w=100 
w=150 
w=200 

that our algorithms determine, and k' be the number of the 
bands  which  include  TNL  alignments.  Also,  let  t  be  the 
average  number of TNL  alignments  in  a band.  Then,  the 
equation (1) can be rewritten as follows: 

kk't 

k't+k-k' 

Hence, our improved algorithm is faster than Arslan et a/.'s 
by the following factor: 

kk't 

k't+k-k'.  X S 

where s is the speedup of our simple algorithm over Arslan 
eta!.' s. 

Consider the experimental results for the first data set in 
Table  2.  When  w=150,  Tr-15  and  Tb=50,  we  have  S;;::80 
and  k=S,  k'=5,  t==1/3  (k,  k' are  not shown  in  Table 2 since 
the number of TNL alignments is 15 as shown in Table 4). 
By the  above  formula,  our improved  algorithm  should  be 
approximately 400 times faster than Arslan et a/.'s and the 
result  (631603/1895 ;;::330)  is  similar to  our expectation. 
(Note  that  the  time  of  the  improved  algorithm  can  vary 
depending  on  the  value  of  Tb  in  each  case.)  For  another 
example,  when  w=200,  Tr-12  and  Tb=80,  we  get  S;;::18, 
k=24,  k'=5 and t==1/3.  Thus,  our improved algorithm should 
be about 200 times faster than Arslan eta/.' s and the result 
(631603/3492;;::180}  shows  an  approximately same  ratio. 

For the  second  data  set,  our algorithm  is  about 40  times 
faster than  Arslan  et a/.' s when  w=150,  Tr-15  and  Tb=50, 
and about 50 times faster when w=200, Tr-12 and Tb=80. 

Table  4 shows  the  accuracy  of  our  algorithms.  For 
example,  when  w=1 00,  71=20  and  Tb=30  in  Table  4,  our 
algorithms  find  12  out  of  15  TNL  alignments.  But  as  w 
increases  and  Tt  decreases,  our algorithms  are  getting 
more  accurate.  Note  that  our algorithms  find  all  TNL 
alignments when w:::::: 150 and Tt::;. 15. 

In addition to extremely fast speeds, another advantage 
of our algorithms is that we can change the parameters w, 
Tt and Tb to adjust the time and accuracy of our algorithms. 

Acknowledgments 

This  work  was  supported  by the  Brain  Korea  21  Project, 
the  IMT 2000 Project AB02, the MOST grant M6-0203-00-
0039, and the RIACT at Seoul National University. 

References 
Alexandrov,  N.N.,  and  Solovyev,  V.V.,  (1998).  Statistical 
significance  of  ungapped  alignments,  Pacific  Symposium  on 
Biocomputing' 98, 463-472. 

Arslan, A.N., and  Egecioglu,  0.(1999), An efficient uniform-cost 
normalized  edit distance  algorithm,  Symposium  on  String 
Processing and Information  Retrieval' 99,  IEEE  Computer 

A Heuristic Algorithm to Find All Normalized Local Alignments Above Threshold  31 

Table 4. The number of TNL alignments that are found (first data set I second data set). 

Arslan et al.' s algorithm 

15 I 12 

w=100 
w=150 
w=200 

11= 12, T&=80 

Tr-15, Th=50 

11=20, T,=30 

Simple/Improved algorithm 

13/12 
15/12 
15/12 

13/12 
15/12 
15/12 

12/11 
13/12 
14/12 

Society, 8-15. 

Arslan,  A.N.,  and  Egecioglu, 0.(2003),  Efficient  algorithms  for 
normalized  edit  distances,  Journal of Discrete  Algorithms, 
Hermes Science Publications,  in press. 

Arslan,  A.N.,  Egecioglu,  0., and  Pevzner,  P.  (2001).  A new 
approach  to  sequence  comparison:  normalized  sequence 
alignment, Bioinformatics 17, 327-337. 

Chen, T., and Skiena, S.S., (1997). Trie-based data structures for 
sequence assembly, Combinatorial Pattern Matching' 97,  206-
223. 

Dinkelbach,  W.,  (1967).  On  nonlinear fractional  programming, 

Management Science 13, 492-498. 

Egecioglu,  0., and  lbel,  M.  (1996).  Parallel  algorithms  for  fast 
computation of normalized edit distances, IEEE Symposium on 
Parallel and Distributed Processing' 96, 496-503. 

Gotoh,  0.,  (1982).  improved  algorithm  for  matching  biological 

sequences, Journal of Molecular Biology 162, 705-708. 

Goad,  W.B.,  and  Kanehisa,  M.l.  (1982).  Pattern  recognition  in 
nucleic  acid  sequences.  i.  a general  method  for  finding  local 
homologies and symmetries, Nucleic Acids Research  10, 247-
263. 

Green,  P.,  Documentation for phrap,  Genome Center,  University 
of Washington, http://www.phrap.org/ phrap.docs/phrap.html. 

Gusfield,  D.  (1997).  Algorithms  on  Strings,  Trees,  and 

Sequences, Cambridge University Press. 

Lipman,  D.,  and  Pearson, W.  (1988)  Improved tools for biological 
sequence  comparison,  Proceedings  of National Academy of 
Science 85, 2444-2448. 

Marzal,  A.,  and  Vidal,  E.  (1993)  Computation  of  normalized  edit 
distances  and  applications,  IEEE  Transactions  on  Pattern 
Analysis and Machine Intelligence 15, 926-932. 

Sellers,  P.H.  (1984).  Pattern  recognition  in  genetic sequences by 
mismatch  density,  Bulletin  of Mathematical Biology 46,  501-
504. 

Setubal,  J.,  and  Meidanis,  J.,  (1997).  Introduction  to  com(cid:173)

putational molecular biology,  PWS Publishing Company. 

Smith,  T.F.,  and  Waterman,  M.S.  (1981).  Identification  of 
common  molecular subsequences,  Journal  of Molecular 
Biology 147, 195-197. 

Waterman,  M.S.,  (1995).  Introduction  to  Computational  Biology, 

Chapman & Hall, London 

Zhang,  Z.,  Berman,  P.,  and  Miller,  W.  (1998). Alignments without 
low scoring  regions,  Journal of Computational Biology 5,  197-
200. 

Zhang,  Z.,  Berman,  P.,  Wiehe,  T.,  and  Miller,  W.  (1999).  Post(cid:173)
processing  long pairwise alignments,  Bioinformatics  15,  1012-
1019. 

